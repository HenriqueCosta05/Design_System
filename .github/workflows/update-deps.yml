name: Automate Dependency Updates
run-name: Checking for outdated dependencies
on: 
  pull_request:
    branches:
      - main

jobs:
  check-if-needs-maintenance:
    name: Check if the project needs maintenance before updating dependencies
    runs-on: ubuntu-latest

    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check if the project needs maintenance
        run: |
          if ! yarn build-storybook; then
            echo "Project needs maintenance. Storybook failed to run."
            exit 1
          else
            echo "Storybook ran successfully. Proceeding with dependency updates."
          fi

  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: check-if-needs-maintenance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'yarn'

      - name: Check for differences in package.json
        id: check_diff
        run: |
          if git diff --exit-code package.json; then
            echo "No changes in package.json. Skipping dependency update."
            exit 0
          else
            echo "Changes detected in package.json. Proceeding with dependency update."
          fi

      - name: Install dependencies
        if: steps.check_diff.outputs.changed == 'true'
        run: yarn install

      - name: Update dependencies
        if: steps.check_diff.outputs.changed == 'true'
        run: yarn upgrade

      - name: Commit changes
        if: steps.check_diff.outputs.changed == 'true'
        env:
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
          GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
        run: |
          git config --global user.name "${GIT_USERNAME}"
          git config --global user.email "${GIT_EMAIL}"
          git add package.json yarn.lock
          git commit -m 'chore: update dependencies'

      - name: Configure Git user
        env:
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
          GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
        run: |
          git config --global user.name "${GIT_USERNAME}"
          git config --global user.email "${GIT_EMAIL}"

      - name: Merge PR branch into development
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch origin
          git checkout -b development origin/development
          git fetch origin +refs/pull/${{ github.event.pull_request.number }}/merge
          git merge -X theirs --no-ff FETCH_HEAD --allow-unrelated-histories
          git push origin development